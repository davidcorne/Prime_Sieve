This project is a cross platform command line application for finding prime 
numbers. 

The executable usage is found in exe/help.txt or by running prime_finder.exe -h

Building the executable:

This is built using GNU make. To build it you need a copy of my "master" 
makefiles (to save code replication). The two you need are cpp.mk and 
cpp_utest.mk (only needed to build the unit tests). These can be found in the 
following repository: https://github.com/davidcorne/MakeFiles

Other than that building should just be a case of typing make at the project 
directory and an executable will be built in the exe directory. Although it
will have the extension .exe if it is build on linux it will run on linux.

The two alrogithms available:

The sieve file is an implementation of the Sieve of Eratosthene method
of finding primes, more details can be found here: 
http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes

The naive class uses a division method by trying to divide the number in 
question by all the primes lower than it. This uses less storage data as you 
only need to store the odd numbers. This is however slower than the sieve 
method.


The implementation:

They are written in C++ using a vector<bool> to store the primes. This is 
because vector<bool> uses less memory than other containers as it is specilised
so that each bool is stored in only a bit. This means that this class can 
calculate higher primes than if, for example, a vector<int> was used.

Large limits have also been used so that more primes can be calculated, so that
this is portable large_int.h defines the largest unsigned integer that can be 
used and defines LARGE_INT as the largest type of integer.


Speed:

The following tests were run on a desktop with a AMD Athlon(tm) II X4 605e 
Processor Ã— 4 and 2.7 GiB of RAM, running 64 bit Windows 7.

For limits under 100,000 both algorithms registered 0.00 seconds.

Limit: 100,000
Limit: 1,000,000
Limit: 10,000,000
Limit: 100,000,000
Limit: 1,000,000,000

